// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  admin
  user
}

enum Marca {
  apple
  samsung
  xiaomi
  motorola
  nokia
  zte
  infinix
  tecno
  vivo
  oppo
}

enum Estado {
  nuevo
  exhibicion
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model ProductImages {
  id        Int    @id @default(autoincrement())
  productId String
  url       String

  // Relaciones
  product Product @relation(fields: [productId], references: [id])
}

model Product {
  id               String   @id @default(uuid())
  title            String
  description      String
  inStock          Int
  price            Float    @default(0)
  discount         Int?
  slug             String   @unique
  tags             String[] @default([])
  color            String?
  estado           Estado
  bateria          Float?
  marca            Marca
  especificaciones String?

  // Relaciones
  categorias Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImages ProductImages[]

  OrderItem OrderItem[]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Rol       @default(user)
  image         String?

  Order Order[]
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float?
  tipoEnvio    Boolean?
  envio        Float?
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  OrderItem   OrderItem[]
  OrderAdress OrderAdress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  color    String

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAdress {
  id              String  @id @default(uuid())
  correo          String
  nombres         String
  apellidos       String
  tipoDocumento   String
  numeroDocumento String
  departamento    String
  municipio       String
  direccion       String
  direccion2      String?
  // codigoPostal    String
  // ciudad          String
  // pais            String
  telefono        String

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Departamento {
  id        Int         @id
  nombre    String
  Municipio Municipio[]
}

model Municipio {
  id     Int    @id
  nombre String

  // Relaciones
  departamento   Departamento @relation(fields: [departamentoId], references: [id])
  departamentoId Int
}
